Capítulo 5
Squid
Squid é um servidor de proxy (serviço com funcionamento semelhante a um despachante
de páginas web) que suporta HTTP, HTTPS, FTP, etc. Ele reduz a utilização dos recursos
de rede e melhora os tempos de resposta fazendo cache de requisições frequentes.
5.1 Instalando o Squid
Para instalar o seviço Squid deve-se utilizar o comando:
# dnf install squid
5.2 Configurando o Servidor Squid
Para iniciar a configuração do servidor de proxy Squid é necessário copiar o arquivo localizado em /usr/share/doc/squid/squid.conf.documented para /etc/squid/squid.conf,
sobrescrevendo o arquivo squid.conf.
Após a cópia, o arquivo squid.conf está pronto para ser configurado. A configuração
de quais conteúdos devem ser filtrados pelo proxy deve ser feita por meio de uma ACL
(Access Controll List), ou seja, uma lista de controle de acessos.
Para se definir uma ACL basta inserir no arquivo a seguinte linha:
acl redelocal src 192.168.0.106/24
.
5.3 Iniciando o serviço e configurando cliente 31
Toda acl deve ser criada seguindo a seguinte regra:
• 1° campo = acl
• 2° campo = nome da acl
• 3° campo = tipo da acl (em alguns casos, pode ser opcional)
• 4° campo = parâmetro, o qual deve estar de acordo com o tipo definido pelo terceiro
campo.
Neste exemplo, a ACL criada possui o nome redelocal, e sua fonte/origem é a rede
192.168.0.106/24.
É importante comentar todas as outras ACLs que se encontram no arquivo por padrão,
ou seja, que não foram definidas pelo usuário, para evitar conflitos posteriores.
Estando definida uma ACL, deve-se definir qual regra ela irá seguir. Neste exemplo, o
acesso a rede será liberado à ACL redelocal, o que pode ser feito ao se inserir no arquivo,
na seção adequada, a seguinte linha:
http_access allow redelocal
É considerado uma boa prática de segurança sempre inserir a seguinte linha, após
todas as outras linhas de permissões de ACL, pois garante que somente terá acessoa rede
quem se encontra nas ACLs permitidas.
http_access deny all
É importante notar que, tendo em vista o modo como o serviço Squid funciona, é
imperativo ter sempre em mente a ordem na qual são garantidas as permissões a cada
ACL. Isto deve-se ao fato de que uma permissão garantida a uma ACL não pode ser
sobrescrita nenhuma regra inserida posteriormente.
Por exemplo, a ACL rede local tem permissão de acesso à rede. A regra inserida
logo após essa permissão (http_access deny all) nega o acesso a todos os usuários, porém, não irá negar o acesso à ACL redelocal, pois sua permissão de acesso foi garantida
anteriormente à esta regra.
5.3 Iniciando o serviço e configurando cliente
Para iniciar o serviço, deve-se utilizar o comando:
# systemctl start squid
5.4 Criando ACLs específicas 32
Após, utilize o comando a seguir para habilitar a inicialização do servidor proxy Squid
juntamente ao boot da máquina servidora:
# systemctl enable squid
Para se testar a funcionalidade deste serviço, em uma máquina cliente, utilizando o
navegador Mozilla Firefox por questões de facilidade de uso, deve-se configurar o proxy
(NO NAVEGADOR) com o IP da máquian servidora e porta 3128, que é a porta padrão
utilizada pelo serviço Squid.
É importante recordar que o serviço deve ser reinicializado toda vez que for realizada
alguma alteração, utilizando o comando:
# squid -k reconfigure
Não é recomendado utilizar o comandos systemctl stop squid e systemctl start
squid para a reinicialização devido à lentidão de sua execução.
5.4 Criando ACLs específicas
É possível criar ACLs que permitem o bloqueio ou a liberação de IPs, faixas de IPs, redes
e sites, seja por tempo determinado ou indeterminado.
5.4.1 Bloqueando máquinas ou redes
Para bloquear uma máquina ou rede, deve-se criar uma ACL onde é indicado qual IP ou
rede deve ser bloqueada.
acl maquina1 src 192.168.0.200/24
acl bancada1 src 192.168.0.200/24
Para bloquear requisições provenientes destas origens, deve-se adicionar as seguintes
linhas:
http_access deny maquina1
http_access deny bancada1
5.4 Criando ACLs específicas 33
5.4.2 Utilizando intervalos de tempo
É possível criar ACLs que irão limitar acesso baseado em tempo. Para isso utilize a
seguinte sintaxe de ACL:
acl intervalo time 12:00-14:00
Nesta ACL, o acesso pode ser bloqueado ou permitido durante o intervalo entre 12
horas e 14 horas.
5.4.3 Bloqueando domínios
Para limitar o acesso a domínios é possível utilizar dois tipos de ACL:
acl terra dst www . terra . com . br
act terra2 dstdomain www . terrra . com . br
Figura 5.1: Acl’s de dominios.
Na ACL terra, está sendo definido o dominio com destino www.terra.com.br, porém
isso não engloba limitando todo o domínio, ou seja, www.terra.com.br/noticias não está
incluído. Já em terra2 está sendo limitado todo o domínio www.terra.com.br.
5.4.4 Utilizando expressões regulares
Para utilizar uma verificação via expressão regular pode-se utilizar dois tipos de ACL
como demonstrado abaixo:
acl terra3 url_regex -i terra
acl terra4 dstdom_regex -i terra
Figura 5.2: Acl’s com regex.
Ambos possuem um funcionamento similar, porém será empregado o uso de dstdom_regex,
pois é uma expressão regular mais restritiva e evita falsos positivos.
Uma boa prática na criação ACLs para sites ou expressões regulares é agrupa-los em
um arquivo externo posteriormente referenciando este arquivo nas configurações do Squid.
Por exemplo, foi criado o arquivo sites.txt em /etc/squid/ com o seguinte conteúdo.
No arquivo de configuração, deve-se criar a seguinte ACL:
acl proibidos dstdom_regex - i "/etc/squid/sites.txt"
5.5 Squid com Autenticação 34
www . uol . com . br
www . globo . com . br
www . terra . com . br
Figura 5.3: Urls para bloqueios.
Com isso, todos nossos sites estão agrupados em somente uma localidade e somente
uma ACL referenciando todos.
No exemplo foram citados apenas sites, mas é possível bloquear palavras e até mesmo
extensões de arquivos desde que a conexão não seja criptografada.
5.5 Squid com Autenticação
O Squid possui a opção de criar autenticações para limitar os acessos a determinados sites
para que assim seja facilitada a administração dos acessos de modo a deixar que apenas
alguns usuários realizem os acessos.
Para isso deve-se adicionar as seguintes linhas no arquivo de configuração do Squid:
auth_param basic realm Acesso Restrito
auth_param basic program / usr / lib64 / squid / basic_ncsa_auth
/ etc / squid / senhas . txt
Figura 5.4: Atenticações com ACL.
• auth_param basic realm: Aqui é definida a mensagem que será apresentada ao
usuário ao tentar fazer o acesso.
• auth_param basic program: Aqui é definido qual programa irá fazer a autencicação
de usuários, neste caso é utilizado o ncsa_auth, e um arquivo de senhas.
Deve-se também adicionar uma ACL referente à autenticação:
acl autenticados proxy_auth REQUIRED
Em seguida deve-se aplicar as regras de acesso utilizando a nova ACL. No caso será
liberado o acesso somente para os autorizados.
http_access allow autenticados
5.5 Squid com Autenticação 35
5.5.1 Criando o arquivo de senhas
Ao criar o arquivo de senhas, é interessante que a senha de cada usuário esteja criptografada (e.g.:/etc/shadow), para realizar isso será utilizado o programa htpasswd, que
está no pacote httpd-tools.
Inicialmente iremos instalar o pacote httpd-tools utilizando o comando:
# dnf install httpd-tools
Após a instalação do httpd-tools iremos criar nosso arquivo senhas.txt em /etc/squid
e para isso podemos utilizar o próprio comando:
# htpasswd -c /etc/squid/senhas.txt didi
# htpasswd -c /etc/squid/senhas.txt dede
Após inserir este comando um prompt será aberto perguntando qual será a senha do
usuário didi/dede. Após confirmado a senha o usuário didi será inserido em senhas.txt.
Faça o mesmo para todos os usários na qual deseja criar.
É possível verificar se o arquivo senhas.txt foi criado corretamente utilizando o comando:
# /usr/lib64/squid/basic_ncsa_auth /etc/squid/senhas.txt
Ele irá retornar OK caso o conteúdo do arquivo esteja correto e ERR caso algum erro
tenha ocorrido no processo de criação.
Por fim digite:
# squid -k reconfigure
Agora quando o cliente abrir o browser irá aparecer uma janela de autenticação, no
qual digitaremos o login e senha.
5.5.2 Criando ACL de autenticação específica para usuários
Agora iremos criar ACLs específicas para cada usuário cadastrado anteriormente. Para
isso podemos simplesmente adicionar as linhas:
Com base em nossas ACLs podemos criar nossas restrições de acesso:
No caso, estamos bloqueando acesso ao usuário didi, liberando somente acesso ao site
do terra para dede e liberando acesso para todos os outros usuários.
Por fim digite:
# squid -k reconfigure
5.6 Regras de iptables de proxy manual 36
acl usuario_didi proxy_auth didi
acl usuario_dede proxy_auth dede
acl acessa_terra dstdom_regex -i terra . com . br
Figura 5.5: Acl’s para usuario.
http_access deny didi
http_access deny dede ! acessa_terra
http_access allow autenticados
Figura 5.6: Restrições para as acl’s criadas.
5.6 Regras de iptables de proxy manual
Para forçar que o cliente navegue obrigatoriamente com proxy usaremos duas regras de
iptables:
# iptables -A FORWARD -i eth1 -p tcp –dport 80 -j DROP
# iptables -A FORWARD -i eth1 -p tcp –dport 443 -j DROP
Por fim digite:
# squid -k reconfigure
5.7 Configurando Cache
Para que as requisições de acesso de um usuário seja feitas de maneira mais rápida, é
recomendave configuar o serviço Squid para que este seja capaz de criar e utilizar um
cache.
No arquivo de configurações do squid, deve-se alterar as seguintes linhas, de acordo
com as necessidaes de cada servidor:
cache_mem 265 MB
Esta linha define a quantidade de memória RAM que o serviço ira reservar para cache.
maximum_object_size_in_memory 512 KB
Esta linha define a o tamanho máximo de memória RAM que pode ser gasto por cada
item salvo.
cache_dir ufs /var/spool/squid 100 16 256
5.7 Configurando Cache 37
Nesta linha, o primeiro parâmetro representa o diretório no qual o squid vai armazenar
os arquivos de cache, o segundo representa a quantidade de espaço em disco utilizada pelo
cache e os dois últimos são os números de pastas e subpastas.
minimum_object_size 1 MB
Esta linha define o tamanho minimo de memória em Disco que deve ser gasto por cada
item salvo.
maximum_object_size 10 MB
Esta linha define o tamanho máximo de memória em Disco que pode ser gasto por cada
item salvo.
cache_swap_high 95
Esta linha define a partir de qual porcentagem de ocupação da memória, o cache deverá
ser esvaziado.
cache_swap_low 70
Esta linha define o limite de esvaziamento de da memória, quando o cache começar a
descartar arquivos.
Após terminadas as configurações, deve-se SEMPRE reinicializar o serviço, utilizando
o seguinte comando:
# squid -k reconfigure






Capítulo 6
Servidor de Nomes (DNS)
6.1 Introdução
Uma parte importante na configuração do servidor e na infraestrutura inclui manter uma
maneira fácil de procurar interfaces de rede e endereços IP por nome, através da criação de
um bom Domain Name System (DNS). O uso de nomes de domínio totalmente qualificados
(FQDNs), em vez de endereços IP, para especificar endereços de rede facilita a configuração
de serviços e aplicações. Configurar o seu próprio DNS para a sua rede privada é uma
ótima maneira de melhorar a gestão dos seus servidores.
Neste tutorial, ensina-se sobre como configurar um servidor DNS interno, utilizando o
software de servidor de nomes BIND (BIND9) no Rocky Linux 9, que pode ser usado por
seus Virtual Private Servers (VPS). Isso fornece uma maneira central para gerenciar nomes
de hosts internos e endereços IP privados, o que é indispensável quando um ambiente se
expande para mais do que alguns hosts.
6.2 Instalação
Inicialmente precisa-se instalar o BIND no servidor DNS. Para isso instale o bind e o
bind-utils.
# dnf install bind bind-utils
Com isso pode-se inicializar o servidor DNS:
# systemctl start named
# systemctl enable named
6.3 Configurando o Bind 39
E para testá-lo:
# dig terra.com.br @127.0.0.1
No windows, utilize o comando:
nslookup terra.com.br
6.3 Configurando o Bind
No Rocky Linux 9 o processo BIND é conhecido como named. Com isso o bind sera
referenciado como named em diversos momentos do relatório.
Vamos começar com o NS1. Abra o arquivo /etc/named.conf.
6.3.1 Liberando acesso ao servidor DNS
Inicialmente o servidor DNS vem configurado para somente receber requisições locais,
porém precisa-se que ele responda as máquinas presentes na rede. Para isso altere o bloco
options.
options {
listen - on port 53 { any ; };
listen - on - v6 port 53 { ::1; };
directory " / var / named " ;
dump - file " / var / named / data / cache_dump . db " ;
statistics - file " / var / named / data / named_stats . txt " ;
memstatistics - file "/ var / named / data / named_mem_stats . txt " ;
allow - query { any ; };
}
...
Figura 6.1: Acesso ao servidor DNS.
Os parâmetros listen-on e allow-query foram alterados. Em listen-on foi adicionado o
parâmetro any, que significa que o servidor DNS pode escutar em qualquer interface de
rede. E em allow-query também foi adicionado o parâmetro any, que diz que qualquer ip
pode realizar consultas no servidor DNS.
OBS: Caso deseje limitar o dns para rede interna, adicione o ip da interface interna
como parâmetro do listen-on, e caso deseje limitar a consulta do DNS para um ip específico, altere o parâmetro allow-query e adicione um ip válido.
6.4 Configurando arquivo local (zonas) 40
6.3.2 Incluindo diretório de zonas
No final do arquivo de configuração adicione a seguinte linha:
include "/etc/named/mynamed.conf";
Com isso o arquivo mynamed.conf esta sendo incluido no arquivo principal de configuração do DNS. Assim, separando as configurações de zonas internas do arquivo principal.
6.4 Configurando arquivo local (zonas)
Agora as zonas locais serão configuradas, as zonas são os endereços na qual o servidor
DNS irá responder.
Comece criando o arquivo mynamed.conf. Para isso, digite:
# vim /etc/named/mynamed.conf
É nesse arquivo que as zonas de encaminhamento e reverso serão configurados. Comece
criando uma zona chamada truco.com.br:
zone " truco . com . br " {
type master ;
file " / var / named / data / truco . com . br . conf " ;
allow - update { none ; };
};
Figura 6.2: Configuração de zonas do DNS.
O parâmetro type indica qual o tipo da zona (master ou slave), o parâmetro file indica
onde está localizado o arquivo de configuração dessa zona e por último, o parâmetro
allow-update indica qual outro servidor pode atualizar o arquivo de configuração da zona.
Após criar o arquivo, mude o grupo do mesmo para named para que o servidor DNS
tenha permissão para ler esse arquivo.
# chown :named mynamed.conf
6.4.1 Configurando zonas de encaminhamento
Nos arquivos de encaminhamento de zona é definido os DNS Records que serão encaminhados para os DNS Lookups quando há pesquisas. Desta forma quando o DNS receber uma
query "truco.com.br" por exemplo, ele irá procurar pelo arquivo de encaminhamento
referente a esta zona e resolverá a resposta passando o IP referente ao mesmo.
6.4 Configurando arquivo local (zonas) 41
Antes de criar o arquivo de encaminhamento da zona, navegue até o diretório /var/-
named e adicione o SGID ao diretório data, para que todos os arquivos criados dentro
dessa pasta tenham o mesmo grupo deste diretório (no caso, o grupo named).
# chmod g+s data
Agora copie o arquivo named.localhost localizado em /var/named/ para /var/named/data já renomeando para truco.com.br.conf.
# cp /var/named/named.localhost /var/named/data/truco.com.br.conf
O conteúdo do arquivo modificado será o seguinte:
$TTL 1 D
@ IN SOA @ admin . truco . com . br . (
2022120401 ; serial
1 D ; refresh
1 H ; retry
1 W ; expire
3 H ) ; minimum
NS ns1
MX 10 mail
A 192.168.0.107
ns1 A 192.168.0.107
mail A 192.168.0.107
baralho A 192.168.0.107
www CNAME baralho
ftp CNAME baralho
Figura 6.3: Zonas de Encaminhamento DNS.
Significado de cada linha do arquivo:
• $TTL 1D: O tempo que um servidor DNS irá armazenar as configurações deste
arquivo em cache após realizar uma consulta (ao configurar um novo servidor DNS,
interessante colocar um tempo mais baixo para verificar alterações).
• @ IN SOA admin.truco.com.br. (: O @ presente em vários locais desse arquivo
sempre se refere a zona na qual ele é responsável (nesse caso, truco.com.br). O IN
SOA significa o início de uma autoridade, portanto tudo que estiver abaixo dela,
representa o domínio trucos.com.br. O admin.truco.com.br. (lembre-se de adicionar
6.4 Configurando arquivo local (zonas) 42
sempre um ponto no final de um domínio dentro desse arquivo, pois caso contrário
ele completará com o domínio dessa zona) representa o email do responsável por
essa zona (o primeiro ponto representa um arroba já que o @ tem outro significado
dentre desse arquivo).
• 2022120401 ; serial: Representa o número de série do arquivo (o número pode ser
qualquer um desde que a versão mais recente seja superior a versão anterior. Essa
formatação indica a data e a quantidade de alterações por dia), é importante para
sincronização entre master e slave, pois sempre que o slave quiser sincronizar, ele vai
olhar o número de série do arquivo e verificar se é mais recente, caso seja ele atualiza
as configurações. Por isso é muito importante lembrar de alterar esse número de
série ao realizar qualquer alteração no arquivo.
• 1D ; refresh: De quanto em quanto tempo um slave vai verificar se possui alguma
alteração no arquivo fornecido pelo master.
• 1H ; retry: Caso a verificação falhe por algum motivo, esse será o tempo que o slave
levará para realizar uma nova tentativa de verificação.
• 1W ; expire: Caso o slave não consiga realizar essa sincronização, esse será o tempo
que o slave continuará funcionando com a última configuração que ele obteve do
master e após esse tempo o arquivo expirará e o slave parará de responder.
• 3H ) ; minimum: Caso o master pare de funcionar e depois de um tempo retorne a
funcionar, esse será o tempo que o slave demorará para confiar no master novamente.
• NS ns1: Obs: Quando houver um espaço no início da linha nesta parte, é como se
tivesse um @. Essa linha representa qual nome do servidor de nomes desse domínio.
• MX 10 mail: Entrada do nome da máquina que responde por um servidor de email.
O número 10 representa a prioridade desse servidor de email (Quanto menor o
número, maior a prioridade).
• A 192.168.0.107: Dizendo que uma máquina pode responder diretamente pelo domínio. Por exemplo: ao acessar o domínio pelo navegador, pode-se acessar usando
apenas truco.com.br ao invés de www.truco.com.br.
• ns1 A 192.168.0.107: Definindo qual o IP da máquina de servidor de nomes ns1.
• mail A 192.168.0.107: Definindo qual o IP da máquina de email.
• baralho A 192.168.0.107: Definindo qual o IP da máquina que responde pelo nome
baralho.
6.4 Configurando arquivo local (zonas) 43
• www CNAME baralho: Ao invés de utilizar um número de IP todo momento, podese utilizar a diretiva CNAME, indicando que o nome é um apelido. Nesse caso a
máquina www é um apelido para baralho.
• ftp CNAME baralho: A máquina ftp é um apelido para baralho.
Após essas configurações, reinicie o serviço.
# systemctl stop named.service
# systemctl start named.service
Agora, teste a zona criada:
# dig truco.com.br @127.0.0.1
Para que não seja necessário especificar um servidor DNS é necessário alterar o DNS
do sistema. Para isso digite os seguintes comandos:
# nmcli connection modify $PLACAEXTERNA ipv4.dns 127.0.0.1
# nmcli connection up $PLACAEXTERNA
6.4.2 Configurando DNS reverso
Um DNS reverso é necessário quando a informação requisitada para o servidor não for
um nome e sim o IP. Desta forma pode-se traduzir um endereço de IP para um nome e
enviar como resposta o domínio referente ao IP informado.
Primeiramente adicione a seguinte entrada no arquivo mynamed.conf.
zone " 0.168.192. in - addr . arpa " IN {
type master ;
file " / var / named / data /0.168.192. in - addr . arpa . conf " ;
allow - update { none ; };
};
Figura 6.4: Configuração do DNS reverso.
Considerando que nossa rede é 192.168.0.0/24 vamos adicionar somente os octetos na
qual fazerem parte da rede e invertê-los. Como resultado temos 0.168.192.in-addr.arpa.
Agora para criar o arquivo de configuração da zona, copie o arquivo de configuração
anteriormente criado e modifique o nome para 0.168.192.in-addr.arpa.conf.
6.5 Verificando configuração 44
# cp truco.com.br.conf 0.168.192.in-addr.arpa.conf
O conteúdo deste arquivo será bem similar ao anterior, porém o parâmetro PTR será
utilizado para referenciar nossos hosts conforme a figura abaixo.
$TTL 1 D
@ IN SOA @ admin . truco . com . br . (
2022120401 ; serial
1 D ; refresh
1 H ; retry
1 W ; expire
3 H ) ; minimum
NS ns1
ns1 A 192.168.0.107
107 PTR mail . truco . com . br .
Figura 6.5: Configuração arquivo do DNS reverso.
Importante notar que o PTR referencia somente o valor 107. Considerando que nossa
rede é 192.168.0/24 e o ns1 possui o IP 192.168.0.107 some













6.6 Configurando slave
Primeiramente habilite a transferência no servidor Master. Para isso edite o arquivo
/etc/named/mynamed.conf
# vim /etc/named/mynamed.conf
Adicione o paramêtro com o seguinte ip (maquina servidora secundária) nas zonas
truco.com.br e na zona reversa:
allow-transfer 192.168.0.128; ;
Este parâmetro habilitando a transferência do arquivo de configuração desse servidor
master para o slave localizado em 192.168.0.128. Com isso teremos:
zone " truco . com . br " {
type master ;
file " / var / named / data / truco . com . br . conf " ;
allow - update { none ; };
allow - transfer { 192.168.0.128; };
};
zone " 0.168.192. in - addr . arpa " IN {
type master ;
file " / var / named / data /0.168.192. in - addr . arpa . conf " ;
allow - update { none ; };
allow - transfer { 192.168.0.128; };
};
Figura 6.6: Arquivo mynamed.conf.
6.6 Configurando slave 46
Em seguida, na máquina slave, altere o arquivo /etc/named/mynamed.conf da mesma
forma que foi alterado no servidor master.
options {
listen - on port 53 { any ; };
listen - on - v6 port 53 { ::1; };
directory " / var / named " ;
dump - file " / var / named / data / cache_dump . db " ;
statistics - file " / var / named / data / named_stats . txt " ;
memstatistics - file "/ var / named / data / named_mem_stats . txt " ;
allow - query { any ; };
}
...
Figura 6.7: Configurando slave.
Também adicione a linha contendo o include no final do arquivo.
include "/etc/named/mynamed.conf";
Por fim, adicione as zonas que serão recebidas do master no arquivo /etc/named/mynamed.conf
da seguinte forma:
zone " truco . com . br " IN {
type slave ;
file " / var / named / slaves / truco . com . br . conf ";
masters { 192.168.0.107; };
};
zone " 0.168.192. in - addr . arpa " IN {
type slave ;
file " / var / named / slaves /0.168.192. in - addr . arpa . conf " ;
masters { 192.168.0.107; };
};
Figura 6.8: Zonas slave.
Após finalizar a configuração do arquivo mynamed.conf do slave, inicie o servidor DNS
que receberá os arquivos de configuração do master.
# systemctl start named
Verifique se os arquivos de configuração estão no diretório especificado:
# ls -l /var/named/slaves
6.6 Configurando slave 47
Caso os arquivos estejam presentes, verifique se o dono e o grupo dos arquivos é o
usuário named e se o usuário named tem permissão de escrita e leitura nesses arquivos.
Se nenhuma das condições anteriores for satisfeita, basta mudar o dono e grupo dos
arquivos e alterar suas permissões:
# chown named:named /var/named/slaves/*
# chmod 644 /var/named/slaves/*
Por fim, realize uma consulta utilizando o servidor DNS do slave e verifique se ele
responde da mesma forma que o master.
# dig truco.com.br @192.168.0.128
